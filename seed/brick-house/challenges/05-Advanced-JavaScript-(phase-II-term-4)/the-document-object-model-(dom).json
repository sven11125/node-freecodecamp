{
    "name": "The Document Object Model (DOM)",
    "order": 4,
    "time": "5 hours",
    "helpRoom": "Help",
    "challenges": [
        {
            "id": "83ac98d02700db21189de995",
            "title": "Introduction to the DOM Challenges",
            "description": [
                [
                    "",
                    "",
                    "The Document Object Model (DOM) specifies how browsers should create a model of an HTML page and how JavaScript can access and update the contents of a web page while it is in the browser window"
                ],
                [
                    "",
                    "",
                    "The DOM is neither part of HTML, nor part of JavaScript; it is a separate set of rules. It is implemented by all major browser makers, and covers two primary areas:",
                    ""
                ],
                [
                    "MAKING A MODEL OF THE HTML PAGE",
                    "",
                    "When the browser loads a web page, it creates a model of the page in memory. The DOM specifies the way in which the browser should structure this model using a DOM tree. The DOM is called an object model because the model (the DOM tree) is made of objects. Each object represents a different part of the page loaded in the browser window."
                ],
                [
                    "ACCESSING AND CHANGING THE HTML PAGE",
                    "",
                    "The DOM also defines methods and properties to access and update each object in this model, which in turn updates what the user sees in the browser. You will hear people call the DOMan Application Programming Interface (API). User interfaces let humans interact with programs; APis let programs (and scripts) talk to each other. The DOM states what your script can ask the browser about the current page, and how to tell the browser to update what is being shown to the user."
                ]
            ],
            "releasedOn": "",
            "challengeSeed": [],
            "tests": [],
            "type": "Waypoint",
            "challengeType": 7,
            "isRequired": false,
            "translations": {}
        },
        {
            "id": "87ee88402700db21189de995",
            "title": "Select an Element By Its id",
            "description": [
                "The DOM is a way of organizing the elements of an HTML document, for example, the following HTML code:",
                "<a href=\"/images/html-body.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/html-body.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating an example of html code\"></a>",
                "In the DOM may be thought of more like:",
                "<a href=\"/images/dom-tree.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/dom-tree.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating the organization of the DOM\"></a>",
                "The DOM allows us to access the elements of a page through their id's, classes, tags, parent/child elements etc.",
                "Methods that find elements in the DOM tree are called DOM queries.",
                "When you need to work with an element more than once, you should use a variable to store the result of this query.",
                "<a href=\"/images/elementById.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/elementById.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating how to capture an element by its id\"></a>",
                "<hr>",
                "Capture the second item in the list in this way.",
                "",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"#185\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul id=\"list\">",
                "        <li id=\"one\">figs</li>",
                "        <li id=\"two\" class=\"near-expiration\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "  var el = // change this line",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert(el.id == 'two', 'message: var el should capture the second list item');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "8fb558b02700db21189de995",
            "title": "Set The Class On An Element",
            "description": [
                "Now that we have the element stored as a variable we can add and remove classes from it, change its text etc.",
                "In our css code for our shopping list you may have noticed that we have a class called \"on-sale\", suppose we were to run a query that told us that bread was now on sale. We would then want to add the class \"on-sale\" to that list item so it'd also be highlighted.",
                "To do this we will assign the className on the element we captured.",
                "<a href=\"/images/assigningClassName.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/assigningClassName.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating how to change the class name attribute of an element\"></a>",
                "",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"_blank\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul id=\"list\">",
                "        <li id=\"one\">figs</li>",
                "        <li id=\"two\" class=\"near-expiration\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "  var el = document.getElementById(\"two\");",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='two']\").hasClass(\"on-sale\"), 'message: the second element \"bread\" should have the class <code>on-sale</code>');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "90a362302700db21189de995",
            "title": "Preserving Old Classes When Adding New Ones",
            "description": [
                "Notice that though we now added the class <code>on-sale</code> to bread that we lost the class <code>near-expiration</code>, this can be a problem since it's unlikely that the bread got younger by going on sale.",
                "In order to preserve the classes that the element already has, we could capture the classes that it already has, append our class to it, and then set the className element.",
                "This seems like a lot of work, but JavaScript has a method for us in the elements <code>classList</code> attribute called <code>add</code> that takes care of that for us. This way of handling the problem will also only add the class if the element doesn't already possess it.",
                "",
                "Add the class <code>on-sale</code> to the second item in the list without removing the classes it already has.",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"_blank\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul id=\"list\">",
                "        <li id=\"one\">figs</li>",
                "        <li id=\"two\" class=\"near-expiration\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "  var el = document.getElementById(\"two\");",
                "  el.className = 'on-sale';",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='two']\").hasClass(\"on-sale\") && $(\"li[id='two']\").hasClass(\"near-expiration\"), 'message: the second element \"bread\" should have the class <code>on-sale</code> and the class <code>near-expiration</code>');",
                "assert(!code.match(/on-sale\\s+near-expiration/) && !code.match(/near-expiration\\s+on-sale/), 'message: Your code should add to the classes the element already has.');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "90a362302700db21189de994",
            "title": "Adding Classes To Multiple Items",
            "description": [
                "Now that we know how to add classes to elements with or without removing those it already has, lets pretend we waited to long and now our 'near-expiration' items are now expired, so we need to find all items with the class 'near-expired' and change their class to 'expired' (this time we don't need to preserve the old classes).",
                "There are many ways to capture multiple elements from a page, the most common of which are shown here:",
                "<a href=\"/images/elementSelectors.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/elementSelectors.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating the different ways of selecting items through the DOM\"></a>",
                "",
                "LIVE & STATIC NODELISTS \n There are times when you will want to work with the same selection of elements several times, so the NodeList can be stored in a variable and re-used (rather than collecting the same elements again). In a live Nodelist, when your script updates the page, the Node list is updated at the same time. The methods beginning getElementsBy... return live Nodelists. They are also typically faster to generate than static Nodelists. ",
                "",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"_blank\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  .near-expiration{",
                "    color:red;",
                "  }",
                "  .purchased{",
                "    font-weight: bold;",
                "  }",
                "  .on-sale{",
                "    background-color: cyan;",
                "  }",
                "  .expired{",
                "    color:white;",
                "    background-color: red;",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul id=\"list\">",
                "        <li id=\"one\">figs</li>",
                "        <li id=\"two\" class=\"near-expiration on-sale\">bread</li>",
                "        <li id=\"three\" class=\"on-sale\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "        <li id=\"five\" class=\"on-sale\">oranges</li>",
                "        <li id=\"six\" class=\"near-expiration on-sale\">bananas</li>",
                "        <li id=\"seven\">apples</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='two']\").hasClass(\"expired\") && $(\"li[id='six']\").hasClass(\"expired\"), 'message: the items that had the class <code>near-expiration</code> should have the class <code>expired</code>');",
                "assert(!$(\"li[id='one']\").hasClass(\"expired\") && !$(\"li[id='three']\").hasClass(\"expired\") && !$(\"li[id='four']\").hasClass(\"expired\") && !$(\"li[id='five']\").hasClass(\"expired\") && !$(\"li[id='seven']\").hasClass(\"expired\"), 'message: Your code should NOT effect any items without the class <code>near-expiration</code>');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "90a362302700db21189dd994",
            "title": "Changing the Text in a DOM element",
            "description": [
                "For this Challenge, we're going to change the inner text of an element on our list. We will change honey to peanut butter",
                "To do this we need to select the element, we could capture it's inner text as a string, but since we are just replacing what's there we will simply reassign the elements inner text.",
                "",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"_blank\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul id=\"list\">",
                "        <li id=\"one\">figs</li>",
                "        <li id=\"two\">bread</li>",
                "        <li id=\"three\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "        <li id=\"five\">oranges</li>",
                "        <li id=\"six\">bananas</li>",
                "        <li id=\"seven\">apples</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='three']\").text()==='peanut butter', 'message: Your code should change the third item in the list to be \"peanut butter\"');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "90a362302700db21189dd194",
            "title": "Changing innerHTML on DOM elements",
            "description": [
                "Changing the text in elements is a great way to update simple concepts, but take a second to go back and instead of changing honey to peanut butter, try changing it to <em>fresh</em> fruit.(using <code>em</code> tags to create the italics)",
                "You should find that it doesn't actually read the tags, instead it assumes that everything that you enter is meant to be displayed as text. This is helpful for some situations, but doesn't work for others. If we want to use HTML tags in what we're adding to our elements then we instead have to modify it's innerHTML property.",
                "So lets do that, lets change figs on our list to <em>fresh</em> figs. (again the italics are <code>em</code> tags).",
                "",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"_blank\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul id=\"list\">",
                "        <li id=\"one\">figs</li>",
                "        <li id=\"two\">bread</li>",
                "        <li id=\"three\">peanut butter</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "        <li id=\"five\">oranges</li>",
                "        <li id=\"six\">bananas</li>",
                "        <li id=\"seven\">apples</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"li[id='one']\").html()==='<em>fresh</em> figs', 'message: Your code should change the first item in the list to be \"<em>fresh</em> figs\"');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "90a362302700db21189de993",
            "title": "Removing a Dom Element",
            "description": [
                "Next lets look at removing an item from our list to get comfortable with capturing existing elements",
                "In this case we will be removing apples from our list.",
                "We can capture this element in several ways as we now know, but the most efficient way is to capture the <code>Element</code> we want to remove, then Capture the <code>Parent</code> by asking the element for it's parentNode and remove the child from the parent.",
                "",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"_blank\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "      <ul id=\"list\">",
                "        <li id=\"one\">figs</li>",
                "        <li id=\"two\">bread</li>",
                "        <li id=\"three\">honey</li>",
                "        <li id=\"four\">balsamic vinegar</li>",
                "        <li id=\"five\">oranges</li>",
                "        <li id=\"six\">bananas</li>",
                "        <li id=\"seven\">apples</li>",
                "      </ul>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert(code.match(/li\\sid=\"seven\"/) && $(\"div[id='page'] > ul > li[id='seven']\").length === 0, 'message: apples should be removed from the list programatically.');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        },
        {
            "id": "90a362302700db21189df993",
            "title": "Adding a Dom Element",
            "description": [
                "Since we can now capture elements, change their classes, alter the html and text inside of them, and remove them all we need is to be able to create new elements and append them into the page before we move on to the more complex world of possibliities.",
                "We've already seed one way to do this by changing the innerHTML of an object, but this way can be rather difficult to keep track of if we are creating a large or complex component to be added into our page. For that purpose it is better to use the DOM to create a new element, and then append it onto the element we want to contain it with the method <code>appendChild</code>",
                "You've recieved the following list of items each one needs to be wrapped into an <code>li</code> element, the whole list then needs to be added to an <code>ul</code> element and that appended to the end of the <code>div</code> element with the <code>id</code> of \"page\"",
                "figs",
                "bread",
                "honey",
                "balsamic vinegar",
                "oranges",
                "bananas",
                "apples",
                "<a href=\"/images/creatingElements.png\" target=\"_blank\"><img class=\"img-responsive\" src=\"/images/creatingElements.png\" title=\"An image taken From Ducket's JavaScript & JQuery\" alt=\"an image illustrating how to create a new element in the DOM\"></a>",
                "",
                "If you get stuck on any of these challenges, consult chapter 5 of <a href=\"/assets/documentation/JAVASCRIPT_AND_JQUERY.pdf\" target=\"_blank\">JavaScript & JQuery by Jon Duckett.</a> or your Dash Documentation"
            ],
            "challengeSeed": [
                "<html>",
                "  <style>",
                "  li{",
                "    background-color: orange;",
                "    border: 1px solid black;",
                "    height: 25px;",
                "    width: 150px;",
                "    text-align: center",
                "  }",
                "  </style>",
                "  <body>",
                "    <div id=\"page\">",
                "      <h1 id=\"header\">List</h1>",
                "      <h2>Inventory</h2>",
                "    </div>",
                "  </body>",
                "  <script>",
                "  // change code below this line",
                "",
                "  var arr = [\"figs\",\"bread\",\"honey\",\"balsamic vinegar\",\"oranges\",\"bananas\",\"apples\",];",
                "",
                "  // change code above this line",
                "  </script>",
                "</html>"
            ],
            "tests": [
                "assert($(\"div[id='page'] > ul > li\").length === arr.length, 'message: The list of items should be updated to the items in <code>arr</code> programatically');"
            ],
            "type": "waypoint",
            "challengeType": 0,
            "translations": {}
        }
    ]
}